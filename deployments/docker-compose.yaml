services:

  nginx:
    container_name: nginx
    image: nginx
    depends_on:
      - chat-service
      - auth-service
      - websocket-service
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ../website/:/usr/share/nginx/html
    networks:
      - frontend
      - messenger

  websocket-service:
    container_name: websocket-service
    build: ../websocket
    networks:
      - messenger
      - frontend

  auth-service:
    container_name: auth-service
    build: ../auth
    ports:
      - 51756:51756
      - 55403:55403
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: yandex
      JWTKEY: yandex
    depends_on:
      - postgres
    networks:
      - messenger
  
  chat-service:
    container_name: chat-service
    build: ../chat
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: yandex
    depends_on:
      - postgres
    networks:
      - messenger

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: yandex
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - messenger

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - 5050:80
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - frontend
      - messenger

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - messenger

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    depends_on:
      - zookeeper
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - messenger

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
    restart: always
    ports:
      - 8085:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
      - frontend
      - messenger

  promtail:
    image: grafana/promtail
    container_name: promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:rg
      - /var/run/docker.sock:/var/run/docker.sock
      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yaml
    command:
      - --config.file=/etc/promtail/config.yaml
    privileged: true
    networks:
      - messenger

  loki:
    image: grafana/loki
    container_name: loki
    depends_on:
      - promtail
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/loki-config.yaml
    networks:
      - messenger

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
    networks:
      - messenger

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
      - loki
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./monitoring/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafana-data:/var/lib/grafana
    networks:
      - frontend
      - messenger

volumes:
  postgres:
  pgadmin:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  prometheusdata:
  grafana-data:

networks:
  messenger:
    driver: bridge
    internal: true
  frontend:
    driver: bridge