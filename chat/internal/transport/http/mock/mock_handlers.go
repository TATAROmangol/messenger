// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "chat/internal/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// GetMessages mocks base method.
func (m *MockChatService) GetMessages(ctx context.Context, chatID, limit, offset int) ([]domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, chatID, limit, offset)
	ret0, _ := ret[0].([]domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockChatServiceMockRecorder) GetMessages(ctx, chatID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockChatService)(nil).GetMessages), ctx, chatID, limit, offset)
}

// GetUserChats mocks base method.
func (m *MockChatService) GetUserChats(ctx context.Context, userID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChats", ctx, userID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockChatServiceMockRecorder) GetUserChats(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockChatService)(nil).GetUserChats), ctx, userID)
}

// PostMessage mocks base method.
func (m *MockChatService) PostMessage(ctx context.Context, chatID, userID int, text string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessage", ctx, chatID, userID, text)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockChatServiceMockRecorder) PostMessage(ctx, chatID, userID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockChatService)(nil).PostMessage), ctx, chatID, userID, text)
}

// StartChat mocks base method.
func (m *MockChatService) StartChat(ctx context.Context, userID1, userID2 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChat", ctx, userID1, userID2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChat indicates an expected call of StartChat.
func (mr *MockChatServiceMockRecorder) StartChat(ctx, userID1, userID2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChat", reflect.TypeOf((*MockChatService)(nil).StartChat), ctx, userID1, userID2)
}
